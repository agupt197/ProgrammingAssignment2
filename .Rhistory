library(dplyr)
iris=iris
View(iris)
str(iris)
# Histogram
hist(iris$Petal.Length)
# Histogram with Custom title and X axis
hist(iris$Petal.Length,main='Iris Histogram',xlab='Petal Length')
# Histogram with Custom title and X axis, add breaks and color
hist(iris$Petal.Length,main='Iris Histogram',xlab='Petal Length'breaks=50,col='blue')
# Histogram with Custom title and X axis, add breaks and color
hist(iris$Petal.Length,main='Iris Histogram',xlab='Petal Length',breaks=50,col='blue')
# Histogram with Custom title and X axis, add breaks and color
hist(iris$Petal.Length,main='Iris Histogram',xlab='Petal Length',breaks=50,col='red')
# Histogram with Custom title and X axis, add breaks and color
hist(iris$Petal.Length,main='Iris Histogram',xlab='Petal Length',breaks=50,col='gold')
# Histogram with Custom title and X axis, add breaks and color
hist(iris$Petal.Length,main='Iris Histogram',xlab='Petal Length',breaks=50,col='blue')
# Scatterplot
plot(iris$Petal.Length,iris$Sepal.Width)
plot(iris$Sepal.Length,iris$Petal.Length        # x variable, y variable
col = iris$Species,                          # colour by species
pch = 16,                                    # type of point to use
cex = 1,                                     # size of point to use
xlab = "Sepal Lenght",                       # x axis label
ylab = "Petal Length",                       # y axis label
main = "Flower characterstics in Iris")     # plot title
plot(iris$Sepal.Length,iris$Petal.Length,      # x variable, y variable
col = iris$Species,                          # colour by species
pch = 16,                                    # type of point to use
cex = 1,                                     # size of point to use
xlab = "Sepal Lenght",                       # x axis label
ylab = "Petal Length",                       # y axis label
main = "Flower characterstics in Iris")     # plot title
legend (x = 6.5, y = 4, legend = levels(iris$Species), col = c(1:3), pch = 16)
bar_data=iris %>%
group_by(Species) %>%
summarise(Petal.Length=mean(Petal.Length))
barplot(bar_data$Petal.Length,names=bar_data$Species)
?%>%
### ggplot2 is the most common used graphics package in R.  It has great flexibility,
### allows for a wide variety of graphs, and has an easy to understand grammar.
### Additional resources:
### https://www.rstudio.com/wp-content/uploads/2015/03/ggplot2-cheatsheet.pdf
### http://docs.ggplot2.org/current/
# Install the ggplot2 library and load it.
install.packages("ggplot2")
library(ggplot2)
# Assign the diamonds data
diamonds=diamonds
# View the structure of diamonds
str(diamonds)
# Create a histogram of price by adding a geometry.
ggplot(diamonds,aes(price))+geom_histogram()
# Create a density plot by adding geom_density() to p
p+geom_density()
# Create a density plot by adding geom_density() to p
p+geom_density()
# Create a density plot by adding geom_density() to p
p+geom_density()
# Create a histogram of price by adding a geometry.
p=ggplot(diamonds,aes(price))+geom_histogram()
# Assign the ggplot to p without a geometry.
p=ggplot(diamonds,aes(price))
# Create a density plot by adding geom_density() to p
p+geom_density()
# Create a histogram of p, set bins = 50, and add a title.
p+geom_histogram(bins=50)+ggtitle('Histogram of Diamond Price')
ggplot(diamonds,aes(carat,price))+
geom_point()
ggplot(diamonds,aes(carat,price,col=cut)+
geom_point()
ggplot(diamonds,aes(carat,price,col=cut)+
geom_point()
# Color the scatterplot by the cut variable
ggplot(diamonds,aes(carat,price,col=cut))+
geom_point()
ggplot(diamonds,aes(carat,price,col=cut))+
geom_point()
ggplot(diamonds,aes(carat,price,col=cut))+
geom_point(size=2)
ggplot(diamonds,aes(carat,price,col=x))+
geom_point(size=2)
ggplot(diamonds,aes(carat,price,col=x))+
geom_point()
ggplot(diamonds,aes(carat,price))+
geom_point(col='blue')+
ggtitle('scatterplot')+
xlab('Carat')+
ylab('Price')
## Practice:
## Assign the economics data
economics=economics
## View the structure of economics
str(economics)
## create a histogram of pce
hist(economics$pce)
## create a histogram of psavert
hist(economics$psavert)
ggplot(economics,aes(psavert,pce))+
geom_smooth()
ggplot(economics,aes(psavert,pce))+
geom_smooth(method = lm)+
ggtitle('scatterplot of economics')+
xlab('Personal Savings Rate')
ylab('Personal Consumption Expenditures')
## create a histogram of psavert
hist(economics$psavert)
## Create a scatterplot of psavert and pce, add geom_smooth() to the plot
ggplot(economics,aes(psavert,pce))+
geom_smooth()
ggplot(economics,aes(psavert,pce))+
geom_point+
geom_smooth()
ggplot(economics,aes(psavert,pce))+
geom_point()+
geom_smooth()
ggplot(economics,aes(psavert,pce))+
geom_point()+
geom_smooth(method = lm)+
ggtitle('scatterplot of economics')+
xlab('Personal Savings Rate')
ylab('Personal Consumption Expenditures')
ylab('Personal Consumption Expenditures')
ylab('Personal Consumption Expenditures')
ggplot(economics,aes(psavert,pce))+
geom_point()+
geom_smooth(method = lm)+
ggtitle('scatterplot of economics')+
xlab('Personal Savings Rate')+
ylab('Personal Consumption Expenditures')
# Line Graph
# Create the variable unemployment_rate in the economics
# data frame by dividing unemploy by pop.
economics$unemployment_rate=economics$unemploy/economics$pop
ggplot(economics,aes(data,unemployment_rate))+
geom_line()
# Create a line graph of unemployment_rate on date
ggplot(economics,aes(data,unemployment_rate))+
geom_line()
ggplot(diamonds,aes(cut))+
geom_bar()
ggplot(bar_data,aes(cut,price))+geom_bar()
ggplot(bar_data,aes(cut,price))+geom_bar(stat='identity')
ggplot(diamonds,aes(carat,price))+geom_point()+facet_wrap(~cut)
head(iris)
iris.small <- filter(iris, Species %in% c("virginica", "versicolor"))
iris.small <- filter(iris, Species %in% c("virginica", "versicolor"))
iris.small <- filter(iris, Species %in% c("virginica", "versicolor"));
# loading data
data(iris)
iris.small <- filter(iris, Species %in% c("virginica", "versicolor"))
install.packages("dplyr")
install.packages("ggplot2")
library('dplyr')
library('ggplot2')
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
head(iris)
iris.small <- filter(iris, Species %in% c("virginica", "versicolor"))
iris.small <- filter(iris, Species %in% c("virginica", "versicolor"))
# loading data
data(iris)
head(iris)
iris.small <- filter(iris, Species %in% c("virginica", "versicolor"))
iris.small <- iris[iris$Species %in% c("virginica", "versicolor"),]
##iris.small <- filter(iris, Species %in% c("virginica", "versicolor"))
iris.small <- iris[iris$Species %in% c("virginica", "versicolor"),]
glm.out <- glm(Species ~ Sepal.Width + Sepal.Length + Petal.Width + Petal.Length,
data = iris.small,
family = binomial)
summary(glm.out)
glm.out <- glm(Species ~ Sepal.Width + Petal.Width + Petal.Length,
data = iris.small,
family = binomial)
plant1 <- data.frame(Sepal.Length=6.2, Sepal.Width=2, Petal.Length=4.7, Petal.Width=2)
plant2 <- data.frame(Sepal.Length=6.3, Sepal.Width=2.5, Petal.Length=4.6, Petal.Width=1.7)
plant3 <- data.frame(Sepal.Length=6.9, Sepal.Width=3.4, Petal.Length=5.6, Petal.Width=2.1)
predict(glm.out, plant1, type="response")
predict(glm.out, plant2, type="response")
predict(glm.out, plant3, type="response")
installed.packages("KernSmooth")
library(KernSmooth)
